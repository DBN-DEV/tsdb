// Code generated by MockGen. DO NOT EDIT.
// Source: shard.go

// Package memtsdb is a generated GoMock package.
package memtsdb

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockShard is a mock of Shard interface.
type MockShard struct {
	ctrl     *gomock.Controller
	recorder *MockShardMockRecorder
}

// MockShardMockRecorder is the mock recorder for MockShard.
type MockShardMockRecorder struct {
	mock *MockShard
}

// NewMockShard creates a new mock instance.
func NewMockShard(ctrl *gomock.Controller) *MockShard {
	mock := &MockShard{ctrl: ctrl}
	mock.recorder = &MockShardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShard) EXPECT() *MockShardMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockShard) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockShardMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockShard)(nil).Clear))
}

// Insert mocks base method.
func (m *MockShard) Insert(point Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insert", point)
}

// Insert indicates an expected call of Insert.
func (mr *MockShardMockRecorder) Insert(point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockShard)(nil).Insert), point)
}

// Query mocks base method.
func (m *MockShard) Query(tag Tag, min, max time.Time) []Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", tag, min, max)
	ret0, _ := ret[0].([]Point)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockShardMockRecorder) Query(tag, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockShard)(nil).Query), tag, min, max)
}
